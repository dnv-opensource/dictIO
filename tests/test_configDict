/*---------------------------------*- C++ -*----------------------------------*\
filetype dictionary; coding utf-8; version 0.1; local --; purpose --;
\*----------------------------------------------------------------------------*/

#include 'test_paramDict'

input   // The input section defines all settings needed to properly and case-specificly configure the simulation model.
{
    parameterObjects   // parameters that farn.py will vary and set to case specific values when traversing the design space.
    {
        parameterA   // parameter A
        {
            name              'parameterA';
            property          'CONST';
            unit              '-';
            value             $paramA;   // Single reference to a variable. References are prefixed with $.
        }
        parameterB   // parameter B
        {
            name              'parameterB';
            property          'CONST';
            unit              '-';
            value             "$paramB";  // Expression. However, result of this simple expression would be same as using a single reference without double quotes.
        }
        parameterC   // parameter C
        {
            name              'parameterC';
            property          'CONST';
            unit              '-';
            value             "$paramC + 4";  // Expression with one reference and one constant.
        }
        parameterD   // parameter D
        {
            name              'parameterD';
            property          'CONST';
            unit              '-';
            value             "$paramC + $paramD";  // Expression with two references.
        }
        parameterNotVariedButSameForAllCasesE   // a parameter that is NOT varied by farn.py, but set to same value for all cases
        {
            name              'parameterNotVariedButSameForAllCasesE';
            property          'CONST';
            unit              '-';
            value             13.5;
        }
        parameterNotVariedButSameForAllCasesF
        {
            name              'parameterNotVariedButSameForAllCasesF';
            property          'CONST';
            unit              '-';
            value             14.3;
        }
        parameterE
        {
            name              'parameterE0';
            property          'CONST';
            unit              '-';
            value             $paramE[0];  // Expression containing a list
        }
        parameterF
        {
            name              'parameterF00';
            property          'CONST';
            unit              '-';
            value             $paramF[0][0];  // Expression containing lists of a list
        }
        parameterG1
        {
            name              'parameterG1';
            property          'CONST';
            unit              '-';
            value             "$paramG[1][2]";  // Expression containing lists of a list, one value taken
        }
        parameterG2
        {
            name              'parameterG2';
            property          'CONST';
            unit              '-';
            value             "$paramG[0]";  // Expression containing lists of a list, but one row taken
        }
        parameterG3
        {
            name              'parameterG3';
            property          'CONST';
            unit              '-';
            value             "$paramG";  // Expression containing lists of a list, but the whole object is referenced
        }
    }
    time   // parameters of the simulation itself
    {
        tStart                0;
        tStop                 120;
        tUnit                 's';
    }
}

postprocessing   // The postprocessing section defines parameters and output variables
{
    parameterObjects   // parameters, the values of which shall be persisted in the results file
    {
        parameterA
        {
            name              'parameterA';
            property          'CONST';
        }
        parameterB
        {
            name              'parameterB';
            property          'CONST';
        }
        parameterC
        {
            name              'parameterC';
            property          'CONST';
        }
        parameterD
        {
            name              'parameterD';
            property          'CONST';
        }
        parameterNotVariedButSameForAllCasesE
        {
            name              'parameterNotVariedButSameForAllCasesE';
            property          'CONST';
        }
        parameterNotVariedButSameForAllCasesF
        {
            name              'parameterNotVariedButSameForAllCasesF';
            property          'CONST';
        }
        tStart
        {
            name              'tStart';
        }
        tStop
        {
            name              'tStop';
        }
    }
    parameterProperties   // properties of each parameter that shall be persisted in the results file
    (
        'Quantity'    'SIunit'    'Start'    'Unit'    'Value'
    );
    resultObjects   // output variables, the results of which shall be persisted in the results file
    {
        outputVariableG
        {
            name              'variableG';
            property          'y';
        }
        outputVariableH
        {
            name              'variableH';
            property          'y';
        }
        outputVariableI
        {
            name              'variableI';
            property          'y';
        }
        outputVariableJ
        {
            name              'variableJ';
            property          'y';
        }
        tSim
        {
            name              'tSim';
            property          'y';
        }
    }
    resultProperties   // result properties of each output variable that shall be persisted in the results file
    (
        'LastValue'    'MaxValue'    'MeanValue'    'MinValue'    'Protocol'    'Quantity'    'RMSValue'    'SIUnit'    'Unit'   'ProtValues'
    );
    emptyNestedDict
    {

    }
    emptyNestedList
    (

    );
    nestedListWithNestedList
    (
        (
            1.00000000e+00  2.20972831e-17  3.15717747e-18
        );
        (
            2.20972831e-17  1.00000000e+00 -7.07290050e-18
        );
        (
            3.15717747e-18 -7.07290050e-18  1.00000000e+00
        );
    );
    nestedListWithNestedDict
    (
        (
            11       12       13
        );
        {
            value21     21;
            value22     22;
            value23     23;
        }
        (
            31      32      33
        );
    );
    subdict1
    {
        list1
        (
            subdict1
            {
                key1 value1;
                key2 value2;
            }
            subdict2
            {
                key1 value1;
                key2 value2;
            }
        );
    }
}

emptyDict
{

}

emptyList
(

);
