/*---------------------------------*- C++ -*----------------------------------*\
filetype dictionary; coding utf-8; version 0.1; local --; purpose --;
\*----------------------------------------------------------------------------*/

#include 'test_paramDict'

// This is a line comment at the top of the file
references
{
    parameterA   // parameter A
    {
        name              'parameterA';
        value             $paramA;   // Single reference to a variable. References are prefixed with $.
    }
    parameterB   // parameter B
    {
        name              'parameterB';
        value             "$paramB";  // Expression. However, result of this simple expression would be same as using a single reference without double quotes.
    }
    parameterC   // parameter C
    {
        name              'parameterC';
        value             "$paramC + 4";  // Expression with one reference and one constant.
    }
    parameterD   // parameter D
    {
        name              'parameterD';
        value             "$paramC + $paramD";  // Expression with two references.
    }
    parameterE
    {
        name              'parameterE0';
        value             $paramE[0];  // Expression containing a list
    }
    parameterF
    {
        name              'parameterF00';
        value             $paramF[0][0];  // Expression containing lists of a list
    }
    parameterG1
    {
        name              'parameterG1';
        value             "$paramG[1][2]";  // Expression containing lists of a list, one value taken
    }
    parameterG2
    {
        name              'parameterG2';
        value             "$paramG[0]";  // Expression containing lists of a list, but one row taken
    }
    parameterG3
    {
        name              'parameterG3';
        value             "$paramG";  // Expression containing lists of a list, but the whole object is referenced
    }
}


numerals
{
    int1                   0;
    int2                 120;
    float1               3.5;
}

scope
{
    subscope1
    {
        subscope11
        {
            name        'subscope11';
        }
        subscope12
        {
            name        'subscope12';
        }
    }
}

strings
{
    listWithStrings
    (
        'string1'    'string2 has spaces'    'string3'     'string4 is ok but note that string5 is empty'     ''
    );
}

exampleDict
{
    emptyNestedDict
    {

    }
    emptyNestedList
    (

    );
    nestedListWithNestedList
    (
        (
            1.00000000e+00  2.20972831e-17  3.15717747e-18
        );
        (
            2.20972831e-17  1.00000000e+00 -7.07290050e-18
        );
        (
            3.15717747e-18 -7.07290050e-18  1.00000000e+00
        );
    );
    nestedListWithNestedDict
    (
        (
            11       12       13
        );
        {
            value21     21;
            value22     22;
            value23     23;
        }
        (
            31      32      33
        );
    );
    subdict1
    {
        list1
        (
            subdict1
            {
                key1 value1;
                key2 value2;
            }
            subdict2
            {
                key1 value1;
                key2 value2;
            }
        );
    }
}

emptyDict
{

}

emptyList
(

);
