/*---------------------------------*- C++ -*----------------------------------*\
filetype dictionary; coding utf-8; version 0.1; local --; purpose --;
\*----------------------------------------------------------------------------*/

#include 'test_paramDict'

// This is a line comment at the top of the file

emptyDict
{

}

emptyList
(

);

exampleDict
{
    emptyNestedDict
    {

    }
    emptyNestedList
    (

    );
    nestedListWithNestedList
    (
        (
            1.00000000e+00  2.20972831e-17  3.15717747e-18
        );
        (
            2.20972831e-17  1.00000000e+00 -7.07290050e-18
        );
        (
            3.15717747e-18 -7.07290050e-18  1.00000000e+00
        );
    );
    nestedListWithNestedDict
    (
        (
            11       12       13
        );
        {
            value21     21;
            value22     22;
            value23     23;
        }
        (
            31      32      33
        );
    );
    subdict
    {
        list
        (
            subdict1
            {
                key1 value1;
                key2 value2;
            }
            subdict2
            {
                key1 value1;
                key2 value2;
            }
        );
    }
}

numerals
{
    int1                   0;
    int2                 120;
    float1               3.5;
}

strings
{
    listWithStrings
    (
        'string1'    'string2 has spaces'    'string3'     'string4 is ok but note that string5 is empty'     ''
    );
}

references
{
    reference   // reference
    {
        name              'reference';
        value             $paramA;   // Simple reference to a variable. References are prefixed with $.
    }
    expression1   // expression 1
    {
        name              'expression1';
        value             "$paramB";  // Expression. However, result of this expression is same as using a simple reference without double quotes.
    }
    expression2   // expression 2
    {
        name              'expression2';
        value             "$paramC + 4";  // Expression with one reference and one constant.
    }
    expression3   // expression 3
    {
        name              'expression3';
        value             "$paramC + $paramD";  // Expression with two references.
    }
    expressionE
    {
        name              'expressionE0';
        value             $paramE[0];  // Expression containing a list
    }
    expressionF
    {
        name              'expressionF00';
        value             $paramF[0][0];  // Expression containing lists of a list
    }
    expressionG1
    {
        name              'expressionG1';
        value             "$paramG[1][2]";  // Expression containing lists of a list, one value taken
    }
    expressionG2
    {
        name              'expressionG2';
        value             "$paramG[0]";  // Expression containing lists of a list, but one row taken
    }
    expressionG3
    {
        name              'expressionG3';
        value             "$paramG";  // Expression containing lists of a list, but the whole object is referenced
    }
}

scope
{
    subscope1
    {
        subscope11
        {
            name        'subscope11';
        }
        subscope12
        {
            name        'subscope12';
        }
    }
}
