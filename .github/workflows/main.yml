name: Continuous Integration
run-name: Continuous Integration (${{github.event.ref}} by @${{ github.actor }})

on:
  - push
  - pull_request

jobs:
  black:
    name: black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable
        with:
          options: '--check --diff'
          src: '.'

  isort:
    name: isort
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: isort/isort-action@v1.1.0
        with:
          configuration: '--check-only'
          sort-paths: '.'
          requirements-files: 'requirements.txt'

  flake8:
    runs-on: ubuntu-latest
    name: flake8
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip' # cache pip dependencies
      - run: pip install -r requirements.txt
      - uses: py-actions/flake8@v2
        with:
          path: '.'

  pyright:
    runs-on: ubuntu-latest
    name: pyright
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip' # cache pip dependencies
      - run: pip install -r requirements.txt
      - name: Install pyright
        run: pip install pyright==1.1.284
      - name: Run pyright
        run: pyright .
      # - uses: jakebailey/pyright-action@v1
      #   with:
      #     working-directory: '.'

  test:
    name: Test on ${{matrix.python.toxenv}}-${{matrix.platform.toxenv}}
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            toxenv: linux
          - runner: macos-latest
            toxenv: macos
          - runner: windows-latest
            toxenv: windows
        python:
          - version: '3.9'
            toxenv: 'py39'
          - version: '3.10'
            toxenv: 'py310'
    steps:
      - uses: actions/checkout@v3
      - name: Install Python ${{ matrix.python.version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.version }}
          cache: 'pip' # cache pip dependencies
      - name: Install tox
        run: python -m pip install tox
      - name: Run pytest
        run: tox -e ${{matrix.python.toxenv}}-${{matrix.platform.toxenv}}

  # Test also with Python 3.11 (experimental; workflow will not fail on error.)
  test311:
    name: Test on ${{matrix.python.toxenv}}-${{matrix.platform.toxenv}} (experimental)
    needs: test
    continue-on-error: true
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            toxenv: linux
          - runner: macos-latest
            toxenv: macos
          - runner: windows-latest
            toxenv: windows
        python:
          - version: '3.11'
            toxenv: 'py311'
    steps:
      - uses: actions/checkout@v3
      - name: Install Python ${{ matrix.python.version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.version }}
          cache: 'pip' # cache pip dependencies
      - name: Install tox
        run: python -m pip install tox
      - name: Run pytest
        run: tox -e ${{matrix.python.toxenv}}-${{matrix.platform.toxenv}}

  build:
    name: Build source distribution
    runs-on: ubuntu-latest
    environment: pypi
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip' # cache pip dependencies
      - name: Install build and twine
        run: pip install build twine
      - name: Run build
        run: python -m build
      - name: Run twine check
        run: twine check --strict dist/*
      - uses: actions/upload-artifact@v3
        with:
          path: ./dist/*.tar.gz

  # build_wheels:
  #   name: Build wheels for ${{ matrix.platform }}
  #   runs-on: ${{ matrix.platform }}
  #   strategy:
  #     matrix:
  #       platform: [ubuntu-latest, macos-latest, windows-latest]
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 1
  #         lfs: true
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'
  #         cache: 'pip' # cache pip dependencies
  #     - name: Install cibuildwheel
  #       run: python -m pip install cibuildwheel==2.3.1
  #     - name: Build wheels
  #       run: python -m cibuildwheel --output-dir wheels
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: ./wheels/*.whl

  publish:
    name: Publish package
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    needs:
      - black
      - isort
      - flake8
      - pyright
      - test
      - build
      # - build_wheels
    runs-on: ubuntu-latest
    environment: pypi
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: ./dist/
      - uses: pypa/gh-action-pypi-publish@v1.5.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  merge_to_release_branch:
    name: Merge ${{ github.event.ref }} -> release branch
    needs: publish
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch the whole history to prevent unrelated history errors
          fetch-depth: 0
          # The branch you want to checkout (usually equal to `branchtomerge`)
          # ref: ${{ github.event.ref }}
      - uses: devmasx/merge-branch@v1.4.0
        with:
          type: now
          target_branch: release
          github_token: ${{ secrets.RELEASE_TOKEN }}
